import base64,codecs
main = "aW1wb3J0IHVybGxpYi5yZXF1ZXN0LCByZXF1ZXN0cwppbXBvcnQgb3MsIHN5cywgdGltZQojIyMjIyMjIyMjIyMjIyMKClcgPSAiXDAzM1swbSIKRyA9ICdcMDMzWzMyOzFtJwpZID0gJ1wwMzNbMzM7MW0nClIgPSAnXDAzM1szMTsxbScKQiA9ICdcMDMzWzE7MzQ7NDBtJwpMQiA9ICdcMDMzWzE7MzY7NDBtJwpCR19SID0gJ1wwMzNbMDszNzs0MW0nCkJHX0cgPSAnXDAzM1swOzM3OzQybScKQkdfUCA9ICdcMDMzWzA7Mzc7NDRtJwpCR19LID0gJ1wwMzNbMDszNzs0NW0nCgpkaWN0ID0gewoJIkZpcnN0TXNnIiA6ICAgIgkJV0VMQ09NRSBUTyBJbnN0YS1oYWNrIFRPT0xTXG4JCUhvdyBBcmUgWW91IERvaW5nID8gIiwKCSJBbnN3ZXIiIDogIiBJIEhvcGUgWW91J3JlIEdvb2QiLAoJIlNwYWNlcyIgOiAiXG4iLAoJIk5vIEludGVybmV0IiA6ICIgWW91IEFyZSBOb3QgQ29ubmVjdGVkICIsCgkiQ2hlY2siIDogIllvdSBNdXN0IEJlIENvbm5lY3RlZCBXaXRoIEludGVybmV0ICIsCgkiQ29ubmVjdGVkIiA6ICJZb3UgQXJlIENvbm5lY3RlZFxuIiwKCSJUcnkiIDogIlRyeSBBZ2FpblxuIiwKCSJHb29kQnllIiA6ICJbfl0gU2VlIFlvdSBMYXRlciAiLAoJIklLIiA6ICciJywKCSJIZWxwIiA6ICcnJwoJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCXwgQ29tbWFuZCAgICAgICAgICAgICAgICB8IEZvciBXaGF0ICAgICAgICAgICAgICAgICAgfAoJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCXwgSGVscCAgICAgICAgICAgICAgICAgICB8IFNob3cgSGVscCBUYWJsZSAgICAgICAgICAgfAoJwrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3Cgl8IENUUkwgKyBDICsgRU5URVIgICAgICAgfCBFWElUIEZST00gVEhFIFRPT0wgICAgICAgIHwKCcK3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCtwoJfCBFeGl0ICAgICAgICAgICAgICAgICAgIHwgRVhJVCBGUk9NIFRIRSBUT09MCSAgICAgfAoJwrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3CiAgICAgICAgfCBFbnRlciBBIFVzZXJuYW1lICAgICAgIHwgRHVtcCBBbGwgVXNlciBJbmZvcm1hdGlvbiB8CgkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQonJycsCgkiRHJhdyIgOiAnJycKCSAgICArIC0gLS0gWyBCWSBIYWNrZXJTTTkgXQoJICAgICsgLSAtLSBbIFYgMi41IF0KCSAgICArIC0gLS0gWyBHaXRodWIgOiBASGFja2VyU005IF0KICAgICAgICAgICAgKyAtIC0tIFsgVHdpdHRlciA6IEBoYWNrZXJzbTlfIF0KCT4+PiAgRVhJVCBVU0UgOiBDVFJMICsgWiA8PAonJycsCgkiRHJhdzIiIDogJycnCgkgIOOAgVsgRE9XTkxPQUQgQUxMIFBPU1RTIEZST00gSU5TVEFHUkFNIF0KCSAg44CBWyBHRVQgVVNFUlMgRlJPTSBBTlkgSEFTSFRBRyBdCicnJywKCSJEcmF3MyIgOiAnJycKCQnjgIFbIEludGVybmV0IGNvbm5lY3Rpb24gcmVxdWlyZWQgXQoKJycnLAoJIkhlYWRlcnMiIDogewoJCQkJIlVzZXItQWdlbnQiIDogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84My4wLjQxMDMuMTE2IFNhZmFyaS81MzcuMzYiLAoJCQkJIlgtcmVxdWVzdGVkLXdpdGgiIDogIlhNTEh0dHBSZXF1ZXN0IiwKCQkJCSJBY2NlcHQiIDogIiovKiIsCgkJCQkiQ29udGVudC10eXBlIiA6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IgoJCQl9Cn0KCmRlZiBGbHVzaChXaGljaCwgQ29sb3IxLCBDb2xvcjIsIFNsZWVwVGltZTEsIFNsZWVwVGltZTIpOgogICAgZm9yIGNoYXIgaW4gV2hpY2ggOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoQ29sb3IxK2NoYXIrQ29sb3IyKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHRpbWUuc2xlZXAoU2xlZXBUaW1lMSkKICAgIHRpbWUuc2xlZXAoU2xlZXBUaW1lMikKICAgIApkZWYgY29ubmVjdCgpOgogICAgdHJ5OgogICAgICAgIHVybGxpYi5yZXF1ZXN0LnVybG9wZW4oJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJykKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIApkZWYgbWFpbigpOgogICAgRmx1c2goZGljdFsiQ29ubmVjdGVkIl0sIEJHX0csIFcsIDAuMDUsIDAuMykKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgQmFubmVyKCkKCmRlZiBGYWxzZU1haW4oKToKICAgIEZsdXNoKGRpY3RbIk5vIEludGVybmV0Il0sIEJHX1IsIFcsIDAuMDUsIDEpCiAgICBwcmludCAoIiAgICAgICAgICAgICAgICAgICAgICAgICIsIGVuZD0iXHIiKQogICAgcHJpbnQgKEJHX1IrZGljdFsiTm8gSW50ZXJuZXQiXStXLCBlbmQ9IlxyIikKICAgIEZsdXNoKGRpY3RbIkNoZWNrIl0sIFksIFcsIDAuMSwgMCkKICAgIEZsdXNoKGRpY3RbIlRyeSJdICwgQkdfUiwgVywgMC4xLCAwKQogICAgc3lzLmV4aXQoKQoKZGVmIEJhbm5lcigpOgogICAgRmx1c2goZGljdFsiRHJhdyJdLCBZLCBXLCAwLjAzLCAwKQogICAgRmx1c2goZGljdFsiRHJhdzIiXSwgTEIsIFcsIDAuMDMsIDApCiAgICBGbHVzaChkaWN0WyJEcmF3MyJdLCBCLCBXLCAwLjAzLCAwKQoKZGVmIFNjcmVlbigpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBGbHVzaChkaWN0WyJTcGFjZXMiXSoxNCwgVywgVywgMC4wMSwgMCkKICAgIEZsdXNoKGRpY3RbIkZpcnN0TXNnIl0sIEIsIFcsIDAuMDUsIDAuNSkKICAgIEZsdXNoKGRpY3RbIkFuc3dlciJdLCBHLCBXLCAwLjAzLCAwKQogICAgRmx1c2goZGljdFsiU3BhY2VzIl0qNCwgVywgVywgMC4wMSwgMCkKICAgIGNvbm5lY3QoKQogICAgaWYgY29ubmVjdCgpIDoKICAgICAgICBtYWluKCkKICAgIGVsc2UgOgogICAgICAgIEZhbHNlTWFpbigp"
magic = eval(compile(base64.b64decode(eval('\x6d\x61\x69\x6e')),'\x3c\x73\x74\x72\x69\x6e\x67\x3e','\x65\x78\x65\x63'))
