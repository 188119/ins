import base64,codecs
main = "aW1wb3J0IHVybGxpYi5yZXF1ZXN0LCByZXF1ZXN0cwppbXBvcnQgb3MsIHN5cywgdGltZQojIyMjIyMjIyMjIyMjIyMKClcgPSAiXDAzM1swbSIKRyA9ICdcMDMzWzMyOzFtJwpZID0gJ1wwMzNbMzM7MW0nClIgPSAnXDAzM1szMTsxbScKQiA9ICdcMDMzWzE7MzQ7NDBtJwpMQiA9ICdcMDMzWzE7MzY7NDBtJwpCR19SID0gJ1wwMzNbMDszNzs0MW0nCkJHX0cgPSAnXDAzM1swOzM3OzQybScKQkdfUCA9ICdcMDMzWzA7Mzc7NDRtJwpCR19LID0gJ1wwMzNbMDszNzs0NW0nCgpkaWN0ID0gewoJIkZpcnN0TXNnIiA6ICAgIgkJV0VMQ09NRSBUTyBJbnN0YS1oYWNrIFRPT0xTXG4JCUhvdyBBcmUgWW91IERvaW5nID8gIiwKCSJBbnN3ZXIiIDogIiBJIEhvcGUgWW91J3JlIEdvb2QiLAoJIlNwYWNlcyIgOiAiXG4iLAoJIk5vIEludGVybmV0IiA6ICIgWW91IEFyZSBOb3QgQ29ubmVjdGVkICIsCgkiQ2hlY2siIDogIllvdSBNdXN0IEJlIENvbm5lY3RlZCBXaXRoIEludGVybmV0ICIsCgkiQ29ubmVjdGVkIiA6ICJZb3UgQXJlIENvbm5lY3RlZFxuIiwKCSJUcnkiIDogIlRyeSBBZ2FpblxuIiwKCSJHb29kQnllIiA6ICJbfl0gU2VlIFlvdSBMYXRlciAiLAoJIklLIiA6ICciJywKCSJIZWxwIiA6ICcnJwoJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCXwgQ29tbWFuZCAgICAgICAgICAgICAgICB8IEZvciBXaGF0ICAgICAgICAgICAgICAgICAgfAoJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCXwgSGVscCAgICAgICAgICAgICAgICAgICB8IFNob3cgSGVscCBUYWJsZSAgICAgICAgICAgfAoJwrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3Cgl8IENUUkwgKyBDICsgRU5URVIgICAgICAgfCBFWElUIEZST00gVEhFIFRPT0wgICAgICAgIHwKCcK3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCtwoJfCBFeGl0ICAgICAgICAgICAgICAgICAgIHwgRVhJVCBGUk9NIFRIRSBUT09MCSAgICAgfAoJwrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3wrfCt8K3CiAgICAgICAgfCBFbnRlciBBIFVzZXJuYW1lICAgICAgIHwgRHVtcCBBbGwgVXNlciBJbmZvcm1hdGlvbiB8CgkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQonJycsCgkiRHJhdyIgOiAnJycKCSAgICArIC0gLS0gWyBCWSBIYWNrZXJTTTkgXQoJICAgICsgLSAtLSBbIFYgMi41IF0KCSAgICArIC0gLS0gWyBHaXRodWIgOiBASGFja2VyU005IF0KICAgICAgICAgICAgKyAtIC0tIFsgVHdpdHRlciA6IEBoYWNrZXJzbTlfIF0KCgk+Pj4gIEVYSVQgVVNFIDogQ1RSTCArIFogPDw8CicnJywKCSJEcmF3MiIgOiAnJycKCSAg44CBWyBET1dOTE9BRCBBTEwgUE9TVFMgRlJPTSBJTlNUQUdSQU0gXQoJICDjgIFbIEdFVCBVU0VSUyBGUk9NIEFOWSBIQVNIVEFHIF0KJycnLAoJIkRyYXczIiA6ICcnJwoJCeOAgVsgSW50ZXJuZXQgY29ubmVjdGlvbiByZXF1aXJlZCBdCgonJycsCgkiSGVhZGVycyIgOiB7CgkJCQkiVXNlci1BZ2VudCIgOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgzLjAuNDEwMy4xMTYgU2FmYXJpLzUzNy4zNiIsCgkJCQkiWC1yZXF1ZXN0ZWQtd2l0aCIgOiAiWE1MSHR0cFJlcXVlc3QiLAoJCQkJIkFjY2VwdCIgOiAiKi8qIiwKCQkJCSJDb250ZW50LXR5cGUiIDogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiCgkJCX0KfQoKZGVmIEZsdXNoKFdoaWNoLCBDb2xvcjEsIENvbG9yMiwgU2xlZXBUaW1lMSwgU2xlZXBUaW1lMik6CiAgICBmb3IgY2hhciBpbiBXaGljaCA6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShDb2xvcjErY2hhcitDb2xvcjIpCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgdGltZS5zbGVlcChTbGVlcFRpbWUxKQogICAgdGltZS5zbGVlcChTbGVlcFRpbWUyKQogICAgCmRlZiBjb25uZWN0KCk6CiAgICB0cnk6CiAgICAgICAgdXJsbGliLnJlcXVlc3QudXJsb3BlbignaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nKQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQ6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCmRlZiBtYWluKCk6CiAgICBGbHVzaChkaWN0WyJDb25uZWN0ZWQiXSwgQkdfRywgVywgMC4wNSwgMC4zKQogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBCYW5uZXIoKQoKZGVmIEZhbHNlTWFpbigpOgogICAgRmx1c2goZGljdFsiTm8gSW50ZXJuZXQiXSwgQkdfUiwgVywgMC4wNSwgMSkKICAgIHByaW50ICgiICAgICAgICAgICAgICAgICAgICAgICAgIiwgZW5kPSJcciIpCiAgICBwcmludCAoQkdfUitkaWN0WyJObyBJbnRlcm5ldCJdK1csIGVuZD0iXHIiKQogICAgRmx1c2goZGljdFsiQ2hlY2siXSwgWSwgVywgMC4xLCAwKQogICAgRmx1c2goZGljdFsiVHJ5Il0gLCBCR19SLCBXLCAwLjEsIDApCiAgICBzeXMuZXhpdCgpCgpkZWYgQmFubmVyKCk6CiAgICBGbHVzaChkaWN0WyJEcmF3Il0sIFksIFcsIDAuMDMsIDApCiAgICBGbHVzaChkaWN0WyJEcmF3MiJdLCBMQiwgVywgMC4wMywgMCkKICAgIEZsdXNoKGRpY3RbIkRyYXczIl0sIEIsIFcsIDAuMDMsIDApCgpkZWYgU2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIEZsdXNoKGRpY3RbIlNwYWNlcyJdKjE0LCBXLCBXLCAwLjAxLCAwKQogICAgRmx1c2goZGljdFsiRmlyc3RNc2ciXSwgQiwgVywgMC4wNSwgMC41KQogICAgRmx1c2goZGljdFsiQW5zd2VyIl0sIEcsIFcsIDAuMDMsIDApCiAgICBGbHVzaChkaWN0WyJTcGFjZXMiXSo0LCBXLCBXLCAwLjAxLCAwKQogICAgY29ubmVjdCgpCiAgICBpZiBjb25uZWN0KCkgOgogICAgICAgIG1haW4oKQogICAgZWxzZSA6CiAgICAgICAgRmFsc2VNYWluKCk="
magic = eval(compile(base64.b64decode(eval('\x6d\x61\x69\x6e')),'\x3c\x73\x74\x72\x69\x6e\x67\x3e','\x65\x78\x65\x63'))
